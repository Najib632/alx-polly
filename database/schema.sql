/* -------------------------------------------------
1️⃣ Create polls table
------------------------------------------------- */
CREATE TABLE IF NOT EXISTS public.polls (
id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
owner_id      uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
title         text NOT NULL,
description   text,
is_anonymous  boolean DEFAULT false,
allow_multiple boolean DEFAULT false,
max_choices   int DEFAULT 1,
slug          text GENERATED ALWAYS AS (replace(lower(title), ' ', '-')) STORED,
short_code    text UNIQUE DEFAULT substr(md5(gen_random_uuid()::text), 1, 8),
starts_at     timestamptz DEFAULT now(),
ends_at       timestamptz,
is_closed     boolean DEFAULT false,
created_at    timestamptz DEFAULT now()
);

/* Enable RLS – add policies later */
ALTER TABLE public.polls ENABLE ROW LEVEL SECURITY;

/* -------------------------------------------------
2️⃣ Create poll_options table
------------------------------------------------- */
CREATE TABLE IF NOT EXISTS public.poll_options (
id      uuid PRIMARY KEY DEFAULT gen_random_uuid(),
poll_id uuid NOT NULL REFERENCES public.polls(id) ON DELETE CASCADE,
label   text NOT NULL,
idx     int NOT NULL,
UNIQUE(poll_id, idx)
);

ALTER TABLE public.poll_options ENABLE ROW LEVEL SECURITY;

/* -------------------------------------------------
3️⃣ Create votes table
------------------------------------------------- */
CREATE TABLE IF NOT EXISTS public.votes (
id               bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
poll_id          uuid NOT NULL REFERENCES public.polls(id) ON DELETE CASCADE,
option_id        uuid NOT NULL REFERENCES public.poll_options(id) ON DELETE CASCADE,
voter_uid        uuid,
anon_fingerprint text,
created_at       timestamptz DEFAULT now()
);

ALTER TABLE public.votes ENABLE ROW LEVEL SECURITY;

/* Unique indexes enforcing voting rules */
CREATE UNIQUE INDEX IF NOT EXISTS votes_unique_user_per_poll
ON public.votes(poll_id, voter_uid)
WHERE voter_uid IS NOT NULL;

CREATE UNIQUE INDEX IF NOT EXISTS votes_unique_anon_per_poll
ON public.votes(poll_id, anon_fingerprint)
WHERE anon_fingerprint IS NOT NULL;

/* Extra indexes for common queries */
CREATE INDEX IF NOT EXISTS idx_votes_poll_id   ON public.votes(poll_id);
CREATE INDEX IF NOT EXISTS idx_votes_option_id ON public.votes(option_id);

/* -------------------------------------------------
4️⃣ Secure view for option vote counts
------------------------------------------------- */
DROP VIEW IF EXISTS public.poll_option_counts;

CREATE OR REPLACE VIEW public.poll_option_counts
WITH (security_invoker = true)
AS
SELECT
poll_id,
option_id,
COUNT(*) AS vote_count
FROM public.votes
GROUP BY poll_id, option_id;

/* -------------------------------------------------
5️⃣ RLS policies
------------------------------------------------- /
/ Allow users to select polls owned by them. */
CREATE POLICY "Poll owners can see their polls"
ON public.polls FOR SELECT
USING (owner_id = auth.uid());

/* Allow users to insert their own polls. */
CREATE POLICY "Poll owners can create polls"
ON public.polls FOR INSERT
WITH CHECK (owner_id = auth.uid());

/* Allow poll owners to update their polls. */
CREATE POLICY "Poll owners can update their polls"
ON public.polls FOR UPDATE
USING (owner_id = auth.uid());

/* Allow poll owners to delete their polls. */
CREATE POLICY "Poll owners can delete their polls"
ON public.polls FOR DELETE
USING (owner_id = auth.uid());

/* Allow poll options to be viewed by all. */
CREATE POLICY "All users can view poll options"
ON public.poll_options FOR SELECT
USING (true);

/* Allow poll owners to insert options. */
CREATE POLICY "Poll owners can create options"
ON public.poll_options FOR INSERT
WITH CHECK ((SELECT owner_id FROM public.polls WHERE id = poll_id) = auth.uid());

/* Allow poll owners to update options. */
CREATE POLICY "Poll owners can update options"
ON public.poll_options FOR UPDATE
USING ((SELECT owner_id FROM public.polls WHERE id = poll_id) = auth.uid());

/* Allow poll owners to delete options. */
CREATE POLICY "Poll owners can delete options"
ON public.poll_options FOR DELETE
USING ((SELECT owner_id FROM public.polls WHERE id = poll_id) = auth.uid());

/* Allow authenticated users to insert votes. */
CREATE POLICY "Authenticated users can vote"
ON public.votes FOR INSERT
WITH CHECK (voter_uid = auth.uid());

/* Allow anonymous users to insert votes. */
CREATE POLICY "Anonymous users can vote"
ON public.votes FOR INSERT
WITH CHECK (voter_uid IS NULL AND anon_fingerprint IS NOT NULL);

/* Allow poll owners and voters to see votes. */
CREATE POLICY "Poll owners and voters can view votes"
ON public.votes FOR SELECT
USING (
poll_id IN (SELECT id FROM public.polls WHERE owner_id = auth.uid()) OR
voter_uid = auth.uid()
);

/* Allow poll owners to delete votes. */
CREATE POLICY "Poll owners can delete votes"
ON public.votes FOR DELETE
USING (poll_id IN (SELECT id FROM public.polls WHERE owner_id = auth.uid()));

/* Allow voters to delete their own votes. */
CREATE POLICY "Voters can delete their own votes"
ON public.votes FOR DELETE
USING (voter_uid = auth.uid());
